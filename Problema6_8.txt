// Implementação de uma Árvore Binária de Busca (ABB)

funcao criar_no(valor: int): list
inicio
    retorne [valor, [], []]  // [chave, sub-árvore esquerda, sub-árvore direita]
fim

funcao inserir(arvore: list, valor: int): list
inicio
    se tamanho(arvore) == 0 entao
    inicio
        retorne criar_no(valor)
    fim

    se valor < arvore[0] entao
    inicio
        arvore[1] = inserir(arvore[1], valor)
    fim
    senao
    inicio
        arvore[2] = inserir(arvore[2], valor)
    fim
    retorne arvore
fim

funcao minimo(arvore: list, nivel: int): list
inicio
    se tamanho(arvore[1]) == 0 entao
    inicio
        retorne [arvore[0], nivel]
    fim
    senao
    inicio
        retorne minimo(arvore[1], nivel + 1)
    fim
fim

funcao maximo(arvore: list, nivel: int): list
inicio
    se tamanho(arvore[2]) == 0 entao
    inicio
        retorne [arvore[0], nivel]
    fim
    senao
    inicio
        retorne maximo(arvore[2], nivel + 1)
    fim
fim

funcao imprimir_niveis(arvore: list): int // Funções sem retorno explícito podem ser int
inicio
    var fila : list = [arvore]
    enquanto tamanho(fila) > 0 faca
    inicio // <-- CORREÇÃO
        var atual : list = fila[0]
        escreva(atual[0], " ")
        fila = sublista(fila, 1, tamanho(fila) - 1)
        se tamanho(atual[1]) > 0 entao
        inicio // <-- CORREÇÃO
            fila = concatena(fila, [atual[1]])
        fim
        se tamanho(atual[2]) > 0 entao
        inicio // <-- CORREÇÃO
            fila = concatena(fila, [atual[2]])
        fim
    fim
    retorne 0
fim

// Função principal
inicio
    var arvore : list = []
    var valores : list = [50, 30, 70, 20, 40, 60, 80]

    var i : int = 0
    enquanto i < tamanho(valores) faca
    inicio // <-- CORREÇÃO
        arvore = inserir(arvore, valores[i])
        i = i + 1
    fim

    var min : list = minimo(arvore, 0)
    var max : list = maximo(arvore, 0)

    escreva("Chave mínima: ", min[0], ", nível: ", min[1])
    escreva("Chave máxima: ", max[0], ", nível: ", max[1])
    escreva("Árvore nível a nível:")
    imprimir_niveis(arvore)
fim
